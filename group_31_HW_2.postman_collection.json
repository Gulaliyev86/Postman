{
	"info": {
		"_postman_id": "d8b812b1-8684-4e42-82de-124eb0baa741",
		"name": "group_31_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23530620"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2. Статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"var toyota = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s reguest (name вбить руками)\r",
							"pm.test(\"name kamil\", function () {\r",
							"    pm.expect(toyota.name).to.eql(\"kamil\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s reguest (age вбить руками)\r",
							"pm.test(\"age 19\", function () {\r",
							"    pm.expect(toyota.age).to.eql(\"19\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s reguest (salary вбить руками)\r",
							"pm.test(\"salary 1000\", function () {\r",
							"    pm.expect(toyota.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request\r",
							"let reg = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"let reg_name = reg.name\r",
							"pm.test(\"name kamil\", function () {\r",
							"    pm.expect(toyota.name).to.eql(reg_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"let reg_age = reg.age\r",
							"pm.test(\"age 19\", function () {\r",
							"    pm.expect(toyota.age).to.eql(reg_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"let reg_salary = +reg.salary\r",
							"pm.test(\"salary 1000\", function () {\r",
							"    pm.expect(toyota.salary).to.eql(reg_salary);\r",
							"});\r",
							"\r",
							"// console.log(\"reg_age = \" + typeof reg_age)\r",
							"// console.log(\"resp_age = \" + typeof yolocha.age)\r",
							"\r",
							"// console.log(\"reg_name = \" + typeof reg_name)\r",
							"// console.log(\"resp_name = \" + typeof yolocha.name)\r",
							"\r",
							"// console.log(\"reg_salary = \" + typeof reg_salary)\r",
							"// console.log(\"resp_salary = \" + typeof yolocha.salary)\r",
							"\r",
							"// 11. Вывести в консоль праметр family из response\r",
							"console.log(\"family==\", toyota.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary заабрать из request)\r",
							"let reg_u_salary_1_5_year = reg.u_salary_1_5_year\r",
							"// console.log(\"reg_u_salary_1_5_year = \" + typeof reg_u_salary_1_5_year)\r",
							"// console.log(\"resp_u_salary_1_5_year = \" + typeof yolocha.u_salary_1_5_year)\r",
							"let resp_u_salary_1_5_year = reg_salary * 4\r",
							"\r",
							"pm.test(\"u_salary_1_5_year 4000\", function () {\r",
							"    pm.expect(toyota.family.u_salary_1_5_year).to.eql(resp_u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "19",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "kamil",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос \r",
							"// 2. Статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json\r",
							"var toyota = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request\r",
							"let reg = request.data\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s reguest (name вбить руками)\r",
							"pm.test(\"name kamil\", function () {\r",
							"    pm.expect(toyota.name).to.eql(\"kamil\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s reguest (age вбить руками)\r",
							"pm.test(\"age 19\", function () {\r",
							"    pm.expect(toyota.age).to.eql(\"19\");\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s reguest (salary вбить руками)\r",
							"pm.test(\"salary 1000\", function () {\r",
							"    pm.expect(toyota.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль праметр family из response\r",
							"console.log(\"family==\", toyota.family);\r",
							"\r",
							"// 9. Проверить что у параметра dog есть параметр name\r",
							"pm.test(\"name Luky\", function () {\r",
							"    pm.expect(toyota.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить что у параметра dog есть параметр age\r",
							"pm.test(\"age 4\", function () {\r",
							"    pm.expect(toyota.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"name Luky\", function () {\r",
							"    pm.expect(toyota.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"age 4\", function () {\r",
							"    pm.expect(toyota.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "kamil",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?age=19&salary=1000&name=kamil",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "19"
						},
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "name",
							"value": "kamil"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос \r",
							"// 2. Статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json\r",
							"var toyota = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"name kamil\", function () {\r",
							"    pm.expect(toyota.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"age 19\", function () {\r",
							"    pm.expect(toyota.age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из response\r",
							"console.log(\"salary from request ==\", reqData.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из request\r",
							"console.log(\"salary from request ==\", toyota.salary);\r",
							"\r",
							"// 9. Вывести в косносль 0-й элемент параметра salary из response\r",
							"console.log(\"salary[0] from response ==\", toyota.salary[0]);\r",
							"\r",
							"// 10. Вывести в косносль 1-й элемент параметра salary из response\r",
							"console.log(\"salary[1] from response ==\", toyota.salary[1]);\r",
							"\r",
							"// 11. Вывести в косносль 2-й элемент параметра salary из response\r",
							"console.log(\"salary[2] from response ==\", toyota.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"check salary[0] == salary request\", function () {\r",
							"    pm.expect(toyota.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"check salary[1] == salary*2 request\", function () {\r",
							"    pm.expect(toyota.salary[1]).to.eql(String(+reqData.salary*2));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"check salary[2] == salary*3 request\", function () {\r",
							"    pm.expect(toyota.salary[2]).to.eql(String(+reqData.salary*3));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", toyota.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", toyota.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", toyota.salary[0]);\r",
							"\r",
							"// 21. Написать цикл, который  выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (let salary of toyota.salary) {\r",
							"    console.log(\"salary == \" + salary);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=kamil&age=19&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "kamil"
						},
						{
							"key": "age",
							"value": "19"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в request\r",
							"// 3. Вставить параметр name из окружения в request\r",
							"// 4. Отправить запрос \r",
							"// 5. Статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request\r",
							"let requestData = request.data;\r",
							"let req_salary = requestData.salary;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check start_qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							" \r",
							" // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							" // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							" // 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"check person\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"check start_qa_salary == salary from request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary из request (salary забрать из request)\r",
							"pm.test(\"check qa_salary_after_6_months == salary from request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(Number(req_salary)*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary из request (salary забрать из request)\r",
							"pm.test(\"check qa_salary_after_12_months == salary from request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(req_salary)*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary из request (salary забрать из request)\r",
							"pm.test(\"check qa_salary_after_1.5_year == salary from request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(Number(req_salary)*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary из request (salary забрать из request)\r",
							"pm.test(\"check qa_salary_after_3.5_years == salary from request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(Number(req_salary)*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"check person.u_name[1] == salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что в параметре u_age равен age из request (age забрать из request)\r",
							"pm.test(\"check person.u_age  == age from request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(Number(requestData.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что в параметре u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"check person.u_salary_5_years  == salary*4.2 from request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(Number(req_salary)*4.2);\r",
							"});\r",
							"\r",
							"// 22. Написать цикл, который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (key in jsonData.person) {\r",
							"    console.log(key, jsonData.person[key])\r",
							"};\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"// var toyota = pm.response.json();\r",
							"// let reg = request.data\r",
							"// let reg_salary = +reg.salary\r",
							"// console.log(\"reg_salary = \" + typeof reg_salary)\r",
							"// console.log(\"resp_salary = \" + typeof toyota.salary)\r",
							"\r",
							"// pm.test(\"salary 1000\", function () {\r",
							"//     pm.expect(yolocha.salary).to.eql(reg_salary);\r",
							"// });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var toyota = pm.response.json();\r",
							"var resp_token = toyota.token\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Kamil",
							"type": "text"
						},
						{
							"key": "password",
							"value": "01092831",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "example",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var toyota = pm.response.json();\r",
							"let req = request.data\r",
							"let req_salary = +req.salary\r",
							"\r",
							"let resp_salary_1_5 = req_salary * 4\r",
							"\r",
							"console.log(\"req_salary = \" + typeof req_salary)\r",
							"console.log(\"resp_salary = \" + typeof toyota.salary)\r",
							"\r",
							"pm.test(\"salary 1000\", function () {\r",
							"    pm.expect(toyota.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_1_5_year 20000\", function () {\r",
							"    pm.expect(toyota.family.u_salary_1_5_year).to.eql(resp_salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "19",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Kamil",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "example_2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Kamil\",\r\n    \"age\":19,\r\n    \"salary\":1000,\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		}
	]
}