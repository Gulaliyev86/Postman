{
	"info": {
		"_postman_id": "a4c552a2-bbb7-4236-b41c-f834eae26d99",
		"name": "hw_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23530588"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json.\r",
							"var yolka = pm.response.json();\r",
							"\r",
							"// 3. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name == \" + yolka.name, function () {\r",
							"    pm.expect(yolka.name).to.eql(\"Kamil\");\r",
							"});\r",
							"\r",
							"// 4. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age == \" + yolka.age, function () {\r",
							"    pm.expect(yolka.age).to.eql(\"19\");\r",
							"});\r",
							"// 5. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary == \" + yolka.salary, function () {\r",
							"    pm.expect(yolka.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 6. Спарсить request.\r",
							"var req_body = request.data\r",
							"\r",
							"// 7. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = yolka.name\r",
							"var resp_name = req_body.name\r",
							"\r",
							"pm.test(\"Name == \" + resp_name, function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 8. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var req_age = yolka.age\r",
							"var resp_age = req_body.age\r",
							"\r",
							"pm.test(\"Age == \" + resp_age, function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 9.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary = yolka.salary\r",
							"var resp_salary = req_body.salary\r",
							"\r",
							"pm.test(\"Salary == \"+ resp_salary, function () {\r",
							"    pm.expect(+resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 10. Вывести в консоль параметр family из response.\r",
							"console.log(yolka.family)\r",
							"\r",
							"// 11. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year == \" + yolka.family.u_salary_1_5_year, function () {\r",
							"    pm.expect(yolka.family.u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "19",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Kamil",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// 3. Спарсить request.\r",
							"var req_url = pm.request.url.query.toObject()\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name == \" + resp.name, function () {\r",
							"    pm.expect(resp.name).to.eql(req_url.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age == \" + resp.age, function () {\r",
							"    pm.expect(resp.age).to.eql(req_url.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary == \" + resp.salary, function () {\r",
							"    pm.expect(resp.salary).to.eql(+req_url.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog name == \" + resp.family.pets.dog.name, function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.be.have\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog age == \" + resp.family.pets.dog.age, function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.be.have\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog name == \" + resp.family.pets.dog.name, function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog age == \" + resp.family.pets.dog.age, function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kamil&age=19&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kamil"
						},
						{
							"key": "age",
							"value": "19"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// 3. Спарсить request.\r",
							"req_url = pm.request.url.query.toObject()\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name == \" + resp.name, function () {\r",
							"    pm.expect(resp.name).to.eql(req_url.name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age == \" + resp.age, function () {\r",
							"    pm.expect(resp.age).to.eql(+req_url.age);\r",
							"});\r",
							"\r",
							"// 6. Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary_requst == \", req_url.salary)\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary_response == \", resp.salary)\r",
							"\r",
							"// 8. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"salary_0_response == \", resp.salary[0])\r",
							"\r",
							"// 9. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary_1_response == \", resp.salary[1])\r",
							"\r",
							"// 10. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary_2_response == \", resp.salary[2])\r",
							"\r",
							"// 11. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_0_response\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req_url.salary);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_1_response\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(req_url.salary*2);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_2_response\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(req_url.salary*3);\r",
							"});\r",
							"\r",
							"// 14. Создать в окружении переменную name\r",
							"// 15. Создать в окружении переменную age\r",
							"// 16. Создать в окружении переменную salary\r",
							"\r",
							"// 17. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"\r",
							"// 18. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"\r",
							"// 19. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", resp.salary[0]);\r",
							"\r",
							"// 20. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary. \r",
							"for (item in resp.salary) {\r",
							"    console.log(resp.salary[item]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=19&salary=1000&name=Kamil",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "19"
						},
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "name",
							"value": "Kamil"
						}
					]
				}
			},
			"response": []
		}
	]
}